// <auto-generated />
using System;
using GrainRestaurants.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace GrainRestaurants.Infrastructure.Migrations
{
    [DbContext(typeof(GrainRestaurantDBContext))]
    [Migration("20210826011336_ChangeFieldItemsInDishEntity")]
    partial class ChangeFieldItemsInDishEntity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("GrainRestaurants.Core.Entities.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<string>("District")
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<string>("Number")
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Uf")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Address");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AdditionalInfo = "",
                            City = "Uberaba",
                            District = "Santa Maria",
                            Location = "Av Pedro Salomao",
                            Number = "44",
                            PostalCode = "38050-490",
                            Uf = "MG"
                        },
                        new
                        {
                            Id = 2L,
                            AdditionalInfo = "",
                            City = "Uberaba",
                            District = "Centro",
                            Location = "Av Santos Dumont",
                            Number = "10",
                            PostalCode = "38010-370",
                            Uf = "MG"
                        },
                        new
                        {
                            Id = 3L,
                            AdditionalInfo = "",
                            City = "Uberaba",
                            District = "Olinda",
                            Location = "Rua Jonas de Carvalho",
                            Number = "55",
                            PostalCode = "38055-440",
                            Uf = "MG"
                        },
                        new
                        {
                            Id = 4L,
                            AdditionalInfo = "",
                            City = "Uberaba",
                            District = "Estados Unidos",
                            Location = "Avenida Quinze de Novembro",
                            Number = "515",
                            PostalCode = "38015-305",
                            Uf = "MG"
                        });
                });

            modelBuilder.Entity("GrainRestaurants.Core.Entities.Dish", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Itens")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<long>("RestaurantId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("Name", "RestaurantId")
                        .IsUnique();

                    b.ToTable("Dish");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2021, 8, 25, 22, 13, 35, 891, DateTimeKind.Local).AddTicks(6421),
                            ImageUrl = "https://static-images.ifood.com.br/image/upload/t_medium/pratos/1a003463-20d8-4744-841a-6ac212a66c4b/202108101448_P6S1_f.png",
                            Itens = "Frango empanado e dourado com molho suave e cremoso, acompanhado de alface fresquinho, fatias de bacon crocante num pão com gergelim, acompanhamento e bebida.",
                            Name = "Mc Oferta McChicken Bacon",
                            Price = 29.899999999999999,
                            RestaurantId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2021, 8, 25, 22, 13, 35, 892, DateTimeKind.Local).AddTicks(4249),
                            ImageUrl = "https://static-images.ifood.com.br/image/upload/t_low/pratos/1a003463-20d8-4744-841a-6ac212a66c4b/202108101452_10TW_f.png",
                            Itens = "Frango empanado e dourado com o delicioso molho barbecue, cebola fresca, bacon crocante, fatia de queijo cheddar num pão com gergelim, acompanhamento e bebida. Consulte informações nutricionais do refrigerante 400ml em: mcdonalds.com.br/cardapio/bebidas. Não utilize o campo de observações, as alterações devem ser realizadas no pedido.",
                            Name = "McOferta McChicken Barbecue",
                            Price = 28.899999999999999,
                            RestaurantId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2021, 8, 25, 22, 13, 35, 892, DateTimeKind.Local).AddTicks(4303),
                            ImageUrl = "https://static-images.ifood.com.br/image/upload/t_medium/pratos/1a003463-20d8-4744-841a-6ac212a66c4b/202108101448_P6S1_f.png",
                            Itens = "Frango empanado e dourado com o maravilhoso molho cheddar McMelt, cebola shoyo num pão com gergelim, acompanhamento e bebida. Consulte informações nutricionais do refrigerante 400ml em: mcdonalds.com.br/cardapio/bebidas. Não utilize o campo de observações, as alterações devem ser realizadas no pedido.",
                            Name = "Mc Oferta McChicken Cheddar",
                            Price = 23.899999999999999,
                            RestaurantId = 1L
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2021, 8, 25, 22, 13, 35, 892, DateTimeKind.Local).AddTicks(4307),
                            ImageUrl = "https://static-images.ifood.com.br/image/upload/t_low/pratos/6306ea52-09eb-4439-97b4-5d353742d884/202003101215_YD7v_1.png",
                            Itens = "O maior sanduíche de carne 100% bovina do mcdonald’s agora também com creme de muçarela, 2 deliciosas fatias de queijo cheddar e emental, tomate, alface, cebola e o delicioso molho tasty. Mais acompanhamento e bebida em sua McOferta.",
                            Name = "McOferta Big Tasty turbo queijo",
                            Price = 41.899999999999999,
                            RestaurantId = 1L
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(2021, 8, 25, 22, 13, 35, 892, DateTimeKind.Local).AddTicks(4309),
                            ImageUrl = "https://static-images.ifood.com.br/image/upload/t_low/pratos/3ec68ed2-db26-4613-827f-ddcdd4777f76/202011121100_ecUL_f.png",
                            Itens = "Um delicioso hambúrguer feito com picanha, 4 fatias crocantes de bacon, nosso cremoso cheddar, cebola crispy e pão com gergelim.",
                            Name = "McOferta mcpicanha cheddar bacon",
                            Price = 43.899999999999999,
                            RestaurantId = 1L
                        },
                        new
                        {
                            Id = 6L,
                            CreatedAt = new DateTime(2021, 8, 25, 22, 13, 35, 892, DateTimeKind.Local).AddTicks(4314),
                            ImageUrl = "https://static-images.ifood.com.br/image/upload/t_low/pratos/3ec68ed2-db26-4613-827f-ddcdd4777f76/202108101052_1OO2_i.jpg",
                            Itens = "A novidade com Kitkat chega para gerar momentos deliciosos... Venha dar um Break com Kitkat e Mcdonald's! Calda de Chocolate!",
                            Name = "McFlurry Kit Kat Chocolate",
                            Price = 13.9,
                            RestaurantId = 1L
                        },
                        new
                        {
                            Id = 7L,
                            CreatedAt = new DateTime(2021, 8, 25, 22, 13, 35, 892, DateTimeKind.Local).AddTicks(4316),
                            ImageUrl = "https://static-images.ifood.com.br/image/upload/t_low/pratos/3ec68ed2-db26-4613-827f-ddcdd4777f76/202108101052_18NX_i.jpg",
                            Itens = "A novidade com Kitkat chega para gerar momentos deliciosos... Venha dar um Break com Kitkat e Mcdonald's! Calda de Morango!",
                            Name = "McFlurry Kitkat Morango",
                            Price = 13.9,
                            RestaurantId = 1L
                        },
                        new
                        {
                            Id = 8L,
                            CreatedAt = new DateTime(2021, 8, 25, 22, 13, 35, 892, DateTimeKind.Local).AddTicks(4317),
                            ImageUrl = "https://static-images.ifood.com.br/image/upload/t_low/pratos/3ec68ed2-db26-4613-827f-ddcdd4777f76/202005311428_3fyS_2.jpg",
                            Itens = "Uma delícia gelada sabor baunilha, uma supercamada de cobertura de chocolate, caramelo ou morango e ainda por cima com farofa de paçoca.O canudo completa a tentação.",
                            Name = "Top sunadae de morango",
                            Price = 13.9,
                            RestaurantId = 1L
                        },
                        new
                        {
                            Id = 9L,
                            CreatedAt = new DateTime(2021, 8, 25, 22, 13, 35, 892, DateTimeKind.Local).AddTicks(4320),
                            ImageUrl = "https://static-images.ifood.com.br/image/upload/t_low/pratos/3ec68ed2-db26-4613-827f-ddcdd4777f76/202107211616_JD81_i.jpg",
                            Itens = "O novo McShake é feito com leite e batido na hora. Você pode escolher nos sabores Ovomaltine , Chocolate Kopenhagen ou morango.",
                            Name = "McShake Morango",
                            Price = 15.9,
                            RestaurantId = 1L
                        },
                        new
                        {
                            Id = 10L,
                            CreatedAt = new DateTime(2021, 8, 25, 22, 13, 35, 892, DateTimeKind.Local).AddTicks(4322),
                            ImageUrl = "https://static-images.ifood.com.br/image/upload/t_low/pratos/3ec68ed2-db26-4613-827f-ddcdd4777f76/202108031953_6NW0_i.jpg",
                            Itens = "O novo McShake é feito com leite e batido na hora. Você pode escolher nos sabores Ovomaltine , Chocolate Kopenhagen ou morango.",
                            Name = "McShake chocolate Kopenhagen",
                            Price = 15.9,
                            RestaurantId = 1L
                        });
                });

            modelBuilder.Entity("GrainRestaurants.Core.Entities.Password", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Password");
                });

            modelBuilder.Entity("GrainRestaurants.Core.Entities.Restaurant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("AddressId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FederalDocument")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("RestaurantTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Resume")
                        .HasColumnType("text");

                    b.Property<double>("Score")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("FederalDocument")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("RestaurantTypeId");

                    b.ToTable("Restaurant");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AddressId = 1L,
                            CreatedAt = new DateTime(2021, 8, 25, 22, 13, 35, 900, DateTimeKind.Local).AddTicks(989),
                            FederalDocument = "01631311000464",
                            ImageUrl = "https://static-images.ifood.com.br/image/upload/t_thumbnail/logosgde/201901041513_3ec68ed2-db26-4613-827f-ddcdd4777f76.jpg",
                            IsOpen = true,
                            Name = "Mcdonald's",
                            Phone = "33333333",
                            RestaurantTypeId = 7L,
                            Resume = "Líder no segmento de serviço rápido de alimentação, o McDonalds se destaca pela qualidade dos produtos e do atendimento. Sempre temos uma Mc Oferta especial (promoção) de Hamburguer, lanches, sanduíche, batata e sorvete. Aproveite!",
                            Score = 4.7000000000000002
                        },
                        new
                        {
                            Id = 2L,
                            AddressId = 2L,
                            CreatedAt = new DateTime(2021, 8, 25, 22, 13, 35, 900, DateTimeKind.Local).AddTicks(2029),
                            FederalDocument = "03640022000104",
                            ImageUrl = "https://static-images.ifood.com.br/image/upload/t_high/logosgde/b3e531ca-e1ff-4767-9868-edde3d624366/202103031204_JOYV_i.jpg",
                            IsOpen = true,
                            Name = "Habib's",
                            Phone = "33333333",
                            RestaurantTypeId = 1L,
                            Resume = "O Habib’s é a maior rede de restaurantes do mundo de comida árabe. Delícias como a exclusiva esfiha, kibe, beirute, pastel, pizzas, bolinho de bacalhau e sobremesas como sorvetes, pastel de belém, pudim e refrigerantes e sucos completam seu pedido",
                            Score = 4.4000000000000004
                        },
                        new
                        {
                            Id = 3L,
                            AddressId = 3L,
                            CreatedAt = new DateTime(2021, 8, 25, 22, 13, 35, 900, DateTimeKind.Local).AddTicks(2035),
                            FederalDocument = "10504193000171",
                            ImageUrl = "https://static-images.ifood.com.br/image/upload/t_high/logosgde/3fb30be0-33de-4ac9-a7af-a3434bea1f7d/202101301033_SQbY_i.png",
                            IsOpen = true,
                            Name = "Macarrão e Cia",
                            Phone = "33333333",
                            RestaurantTypeId = 4L,
                            Resume = "Macarrão e CIA começa em 2005 quando o adquirimos numa oportunidade de negócio. Inicialmente havia um pequeno carro de cachorro quente e uma chapa, localizado na Praça Pôr do Sol em Uberaba.Em janeiro de 2010 seguimos a expansão e abrimos o serviço de \"delivery\".",
                            Score = 4.5
                        },
                        new
                        {
                            Id = 4L,
                            AddressId = 4L,
                            CreatedAt = new DateTime(2021, 8, 25, 22, 13, 35, 900, DateTimeKind.Local).AddTicks(2072),
                            FederalDocument = "26187594000185",
                            ImageUrl = "https://static-images.ifood.com.br/image/upload/t_high/logosgde/f9ea38f4-c7db-4525-b92d-1798e0629aa4/201909101527_hhaI_.jpeg",
                            IsOpen = true,
                            Name = "Los Shakes (Sorvete e Açaí)",
                            Phone = "33333333",
                            RestaurantTypeId = 8L,
                            Resume = "Deliciosa linha de Sorvetes , Milkshakes , Açaí e Açaí Zero Açúcar !!!!! Venha saborear o verdadeiro sabor do Açaí.",
                            Score = 4.9000000000000004
                        });
                });

            modelBuilder.Entity("GrainRestaurants.Core.Entities.RestaurantType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("RestaurantType");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Árabe"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Oriental"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Brasileira"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Italiana"
                        },
                        new
                        {
                            Id = 5L,
                            Name = "Lanche"
                        },
                        new
                        {
                            Id = 6L,
                            Name = "Pizzaria"
                        },
                        new
                        {
                            Id = 7L,
                            Name = "Fast Food"
                        },
                        new
                        {
                            Id = 8L,
                            Name = "Sorveteria"
                        });
                });

            modelBuilder.Entity("GrainRestaurants.Core.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("GrainRestaurants.Core.Entities.Dish", b =>
                {
                    b.HasOne("GrainRestaurants.Core.Entities.Restaurant", "Restaurant")
                        .WithMany("Menu")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("GrainRestaurants.Core.Entities.Password", b =>
                {
                    b.HasOne("GrainRestaurants.Core.Entities.User", "User")
                        .WithMany("Passwords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GrainRestaurants.Core.Entities.Restaurant", b =>
                {
                    b.HasOne("GrainRestaurants.Core.Entities.Address", "Address")
                        .WithMany("Restaurants")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GrainRestaurants.Core.Entities.RestaurantType", "Type")
                        .WithMany("Restaurant")
                        .HasForeignKey("RestaurantTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("GrainRestaurants.Core.Entities.Address", b =>
                {
                    b.Navigation("Restaurants");
                });

            modelBuilder.Entity("GrainRestaurants.Core.Entities.Restaurant", b =>
                {
                    b.Navigation("Menu");
                });

            modelBuilder.Entity("GrainRestaurants.Core.Entities.RestaurantType", b =>
                {
                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("GrainRestaurants.Core.Entities.User", b =>
                {
                    b.Navigation("Passwords");
                });
#pragma warning restore 612, 618
        }
    }
}
